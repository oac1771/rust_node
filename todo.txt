This product could be a like cluster where each pins each others data to as backups for each other
    - look into if you can leverage zksync network to manage communication between nodes
    - smart contract deployed here that is basically a smart wallet that emits events when storing ipfs
        data. It basically stores ipfs hashes


ipfs api docs
http://docs.ipfs.tech.ipns.localhost:8080/reference/kubo/rpc/#getting-started
http://ipfscluster.io.ipns.localhost:8080/documentation/reference/api/
http://docs.ipfs.tech.ipns.localhost:8080/reference/kubo/rpc/#api-v0-bitswap-ledger

example: curl -X POST http://127.0.0.1:5001/api/v0/id

helpful ipfs commands:
ipfs repo gc
    - initiate garbage collection
ipfs pin ls 
    - list pinned files


Rough plan:

get node to talk to local ipfs cluster locally
containerize into docker compose
    - probably going to need to read ipfs url from env variable
set up smart contract deployed to local instance of chain
containerize into docker compose
have containerized node talk to smart contract 

Refactor Ideas:
consider switching to blocking instead of async with reqwest
    - if this doesnt work nicely with rocket, try using ureq crate
